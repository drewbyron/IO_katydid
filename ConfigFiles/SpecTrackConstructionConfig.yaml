processor-toolbox:

    processors:
        - { type: "spec-processor",                  name: "spec1" }
        - { type: "spec-processor",                  name: "spec2" }
        - { type: "data-accumulator",                name: "acc" }
        - { type: "gain-variation",                  name: "gainvar" }
        - { type: "variable-spectrum-discriminator", name: "discrim" }
        - { type: "basic-root-writer",               name: "brw" }
        - { type: "sequential-track-finder",         name: "seq-tr-clust"} 
        - { type: "track-proc-ws",                   name: "tr-proc-ws"}   
        - { type: "root-spectrogram-writer",         name: "rsw"}
        - { type: "root-tree-writer",                name: "rtw"}
   
    connections:
         
          # FIRST SPEC PROCESSING
          # Take the power spectra from the input file and send them to accumulator
        - signal: "spec1:ps"         
          slot: "acc:ps"

          # Copy the accumulated power spectra to gain variation
        - signal: "acc:ps-finished"  
          slot: "gainvar:ps-var"

          # Write the accumulated power spectra to ROOT file
        - signal: "acc:ps-finished"  
          slot: "brw:ps"

          # Write the gain-var histogram to ROOT file 
        - signal: "gainvar:gain-var" 
          slot: "brw:gain-var"

          # Copy the gain-var histogram to the discriminator
        - signal: "gainvar:gain-var"
          slot: "discrim:gv"

          # SECOND SPEC PROCESSING
          # Take the power spectra from the second input file and write them to a ROOT file
        - signal: "spec2:ps"
          slot: "rsw:ps"

          # Copy the power spectra from the second input file to the discriminator
        - signal: "spec2:ps"
          slot: "discrim:ps-pre"
          #Copy 
        - signal: "discrim:disc-1d"
          slot: "seq-tr-clust:disc-1d"

          # Write the spectrogram of points that are above discrim. threshold to ROOT file 
        - signal: "discrim:disc-1d"
          slot: "rtw:disc-1d"
          #NEW
        - signal: "seq-tr-clust:seq-cand"
          slot: "tr-proc-ws:seq-cand"
          #NEW
        - signal: "tr-proc-ws:track"
          slot: "rtw:proc-track"          # Write processed tracks to a ROOT tree

          # (Do I always need this to write out if the spec processor is downstream?)
          # Make sure to send the spec-done signal so the ROOT file gets written
        - signal: "spec2:spec-done"
          slot: "rsw:write-file"
 
    run-queue:
        - spec1
        - spec2

   
spec1:
    filename: "../inputs/specfiles/Fake_bootstrap_2020-04-10-15-32-55_000009.spec"
    spectra: 1600
    freq-bins: 8192
    min-freq: 1.0e6
    max-freq: 1.6e9
    header-bytes: 32

acc:
    number-to-average: 0
    signal-interval: 0

gainvar:
    normalize: false
    min-bin: 100
    max-bin: 8000
    fit-points: 100

spec2:
    filename: "../inputs/specfiles/Fake_bootstrap_2020-05-06-10-44-57_000000.spec"
    spectra: 1600
    freq-bins: 8192
    min-freq: 1.0e6
    max-freq: 1.6e9
    header-bytes: 32

discrim:
    min-bin: 100
    max-bin: 8000
    sigma-threshold: 4.5
    normalize: true
    neighborhood-radius: 2

#NEW
seq-tr-clust:
    min-frequency: 5e6
    max-frequency: 1595.0e6
    initial-slope : 350e6                # slope of a track with 1 point
    slope-method: weighted-first-point-ref
    n-slope-points: 10
    time-gap-tolerance: 0.2e-2
    frequency-acceptance: 56e3
    trimming-threshold: 7.5            # snr threshold for the first and last point of a candidate
    min-points: 2
    min-slope: 0

brw:
    output-file: "../outputs/rootfiles/SpecToSparseGramBRW.root"
    file-flag: "recreate"

rsw:
    output-file: "../outputs/rootfiles/SpecToSparseGramRSW.root"
    file-flag: recreate
    mode: single
    n-time-bins: 1600
    min-freq: 5.0e6
    max-freq: 1595.0e6

rtw:
    output-file: "../outputs/rootfiles/SpecTracks.root"
    file-flag: recreate


